generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Modelos para NextAuth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Para autenticación con credenciales
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  simulaciones     Simulacion[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Modelos para el Simulador de Presupuestos
model Simulacion {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  nombre                String
  descripcion           String?
  tipoProyecto          String
  alcance               String
  usuarios              String
  complejidad           String
  plazo                 String
  presupuestoReferencia String?
  caracteristicas       String[] // Array de características especiales
  
  // Configuración técnica
  tecnologias           String[] // Array de tecnologías seleccionadas
  configuracion         Json?    // Configuración detallada (flexible)
  
  // Resultados
  presupuestoTotal      Float?
  desglose              Json?    // Desglose detallado del presupuesto
  recomendaciones       String[]
  justificacion         String?
  
  // Estado y fechas
  estado                String   @default("borrador") // borrador, configurado, completado
  fechaCreacion         DateTime @default(now())
  fechaActualizacion    DateTime @updatedAt
  fechaCompletado       DateTime?
  
  // Relación con usuario
  userId                String   @db.ObjectId
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("simulaciones")
}

// Catálogo de tecnologías (opcional, para precargar datos)
model Tecnologia {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  nombre      String @unique
  categoria   String
  tipo        String // framework, library, service, etc.
  descripcion String?
  precio      Float? // Precio base por hora/mes/licencia
  unidad      String? // hora, mes, licencia, etc.
  activa      Boolean @default(true)
  
  @@map("tecnologias")
}
